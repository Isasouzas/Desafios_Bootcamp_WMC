# -*- coding: utf-8 -*-
"""Exercicio Banco de Dados - WMC - Isabela Souza.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHDRY9rmqGAz3KvFDkCHe6xa4m6_G1C-

#### Exercícios Banco de Dados - Isabela de Souza Silva - 10030315603 - isabela.souza47@gmail.com - Turma Data Analitics 7
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-sql

# %load_ext sql

# %sql sqlite:///:memory:

# Commented out IPython magic to ensure Python compatibility.
# # 1. Crie uma tabela chamada "alunos" com os seguintes campos: id
# # (inteiro), nome (texto), idade (inteiro) e curso (texto).
# 
# %%sql
# CREATE TABLE alunos (
#     id INTEGER PRIMARY KEY,
#     nome VARCHAR,
#     idade INTEGER,
#     curso VARCHAR
# );
#

# Commented out IPython magic to ensure Python compatibility.
# # 2. Insira pelo menos 5 registros de alunos na tabela que você criou no
# # exercício anterior.
# 
# 
# %%sql
# INSERT INTO alunos (nome,idade,curso) VALUES
# ('Isa', 29, 'Ciencia_dados'),
# ('Maria', 32, 'Ciencia_dados'),
# ('Paula', 19, 'Ciencia_dados'),
# ('Pedro', 22, 'Ciencia_dados'),
# ('João', 25, 'Ciencia_dados');
# 
#

# Commented out IPython magic to ensure Python compatibility.
# # 3. Consultas Básicas
# # Escreva consultas SQL para realizar as seguintes tarefas:
# # a) Selecionar todos os registros da tabela "alunos".
# 
# %%sql
# SELECT * FROM alunos;
# 
# 
# # b) Selecionar o nome e a idade dos alunos com mais de 20 anos.
# 
# SELECT nome, idade
# FROM alunos
# WHERE idade > 20;
# 
# # c) Selecionar os alunos do curso em ordem  alfabética.
# 
# SELECT nome
# FROM alunos
# WHERE curso = 'Ciencia_dados'
# ORDER BY nome ASC;
# 
# # d) Contar o número total de alunos na tabela
# 
# SELECT COUNT(*) AS total_alunos
# FROM ALUNOS;

# Commented out IPython magic to ensure Python compatibility.
# # 4. Atualização e Remoção
# # a) Atualize a idade de um aluno específico na tabela.
# 
# %%sql
# SELECT FROM alunos
# WHERE id = 2;
# 
# UPDATE alunos
# SET idade = 40
# WHERE id = 2;
# 
# SELECT FROM alunos
# WHERE id = 2;
# 
# # b) Remova um aluno pelo seu ID.
# 
# DELETE FROM alunos
# WHERE id = 1;
# 
# SELECT * FROM alunos

# Commented out IPython magic to ensure Python compatibility.
# # 5. Criar uma Tabela e Inserir Dados
# # Crie uma tabela chamada "clientes" com os campos: id (chave
# # primária), nome (texto), idade (inteiro) e saldo (float). Insira alguns
# # registros de clientes na tabela.
# 
# %%sql
# CREATE TABLE clientes (
#     id INTEGER PRIMARY KEY,
#     nome VARCHAR,
#     idade INTEGER,
#     saldo FLOAT
# );
# 
# INSERT INTO clientes (nome, idade, saldo) VALUES
# ('Jupiter', 30, 60.0),
# ('Venus', 20, 100.0),
# ('Marte', 33, 1500.0);
#

# Commented out IPython magic to ensure Python compatibility.
# # 6. Consultas e Funções Agregadas
# # Escreva consultas SQL para realizar as seguintes tarefas:
# # a) Selecione o nome e a idade dos clientes com idade superior a 30 anos.
# 
# %%sql
# SELECT nome, idade
# FROM clientes
# WHERE idade > 30;
# 
# 
# # b) Calcule o saldo médio dos clientes.
# 
# SELECT AVG(saldo) AS saldo_medio
# FROM clientes;
# 
# 
# # c) Encontre o cliente com o saldo máximo.
# 
# SELECT nome, saldo
# FROM clientes
# WHERE saldo = (SELECT MAX(saldo) FROM clientes);
# 
# 
# 
# # d) Conte quantos clientes têm saldo acima de 1000
# 
# SELECT COUNT(*) AS clientes_acima_1000
# FROM clientes
# WHERE saldo > 1000;
#

# Commented out IPython magic to ensure Python compatibility.
# # 7. Atualização e Remoção com Condições
# # a) Atualize o saldo de um cliente específico.
# %%sql
# UPDATE clientes
# SET saldo = 1002.0
# WHERE nome = 'Jupiter';
# 
# 
# 
# # b) Remova um cliente pelo seu ID.
# %%sql
# DELETE FROM clientes
# WHERE id = 3;
# 
# 
#

# Commented out IPython magic to ensure Python compatibility.
# # 8. Junção de Tabelas
# # Crie uma segunda tabela chamada "compras" com os campos: id
# # (chave primária), cliente_id (chave estrangeira referenciando o id
# # da tabela "clientes"), produto (texto) e valor (real).
# 
# %%sql
# CREATE TABLE compras (
#     id INTEGER PRIMARY KEY,
#     cliente_id INTEGER,
#     produto VARCHAR,
#     valor REAL,
#     FOREIGN KEY (cliente_id) REFERENCES clientes(id)
# );
# 
# 
# # Insira algumas compras associadas a clientes existentes na tabela "clientes".
# 
# 
# INSERT INTO compras (cliente_id, produto, valor) VALUES
# (1, 'Refrigerante', 9.00),
# (2, 'Hamburger', 20.00),
# (3, 'Agua', 5.00);
# 
# # Escreva uma consulta para exibir o nome do cliente, o produto e o valor de cada compra.
# 
# SELECT c.nome, p.produto, p.valor
# FROM clientes c
# JOIN compras p ON c.id = p.cliente_id;
# 
# 
#

