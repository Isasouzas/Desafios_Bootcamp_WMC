# -*- coding: utf-8 -*-
"""Estat√≠stica- Probabilidade e Amostragem Desafio Final WMC 16-09-2024 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQzvtK8OB9wh-BlOkn3SMeQbb_aQq46v

### Desafio - Probalidade e Amostragem
### Aluna: Isabela de Souza Silva
### Squad: Grace Hopper
"""

# Primeiro passo, importa√ß√£o das bibliotecas que poderei precisar

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import math

#Leitura do nosso dataframe:

data = pd.read_csv('/content/populacao_brasileira.csv.csv')

# Fazendo uma pequena visualiza√ß√£o:  :)

data.head(10)

# 1. Considere pessoas fluentes em ingl√™s, qual a probabilidade complementar?
# Ou seja, qual a probabilidade de escolhermos uma pessoa aleat√≥ria e ela n√£o ser fluente em ingl√™s. Considere fluente quem tem o n√≠vel avan√ßado.

total_pessoas = len(data)
fluentes = len(data[data['n√≠vel de profici√™ncia em ingl√™s'] == 'Avan√ßado'])
prob_nao_fluente = (total_pessoas - fluentes) / total_pessoas

print(f"Probabilidade de n√£o ser fluente: {prob_nao_fluente:.2%}")

# 2. Se uma pessoa escolhida aleatoriamente for de Alagoas ou do Par√°,
# qual √© a probabilidade de ela ter uma renda superior a 5 mil reais?


# Precisamos fazer os passos:

#Filtrando as pessoas de AL ou PA
al_pa = data[data['estado'].isin(['AL', 'PA'])]

# Contando o total de pessoas de AL ou PA
total_al_pa = len(al_pa)

# Filtrando pessoas com renda superior a 5 mil reais
renda_superior_5k = al_pa[al_pa['renda'] > 5000]

# Contando o n√∫mero de pessoas com renda superior a 5 mil
total_renda_superior_5k = len(renda_superior_5k)

# Calculando a probabilidade
prob_renda_superior_5k = total_renda_superior_5k / total_al_pa if total_al_pa > 0 else 0

print(f"Probabilidade de uma pessoa de AL ou PA ter renda superior a 5 mil: {prob_renda_superior_5k:.2%}")

# 3. Descubra a probabilidade de uma pessoa ter ensino superior completo no estado do Amazonas.
#  Qual a probabilidade da quinta pessoa que voc√™ conversar, que √© amazonense, ter ensino superior completo?


# Primeiro √© preicso filtrar dados para o estado do Amazonas
df_amazonas = data[data['estado'] == 'AM']

# Segundo passo √© calcular a probabilidade de ter ensino superior completo no Amazonas
probabilidade_superior = (df_amazonas['escolaridade'] == 'Superior').mean()
print(f'Probabilidade de uma pessoa ter ensino superior completo no Amazonas: {probabilidade_superior:.2f}')

# Terceiro passo √© verificar se a quinta pessoa (√≠ndice 4) do estado do Amazonas tem ensino superior completo ou n√£o
quinta_pessoa_superior = df_amazonas.iloc[4]['escolaridade'] == 'Superior'
print(f'A quinta pessoa tem ensino superior completo? {"Sim" if quinta_pessoa_superior else "N√£o"}')

# 4. Considerando a renda das pessoas do nosso conjunto, podemos dizer que a renda de uma pessoa brasileira est√° na sua maioria em que faixa (fa√ßa faixa de 1.500 reais)?
#  Qual √© a sua fun√ß√£o densidade de probabilidade?


# Definindo as faixas de renda
faixas = [0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000]
faixa_labels = ['0-1500', '1500-3000', '3000-4500', '4500-6000', '6000-7500', '7500-9000', '9000-10500', '10500-12000']

# Adicionando uma coluna de faixa de renda ao DataFrame
data['faixa_renda'] = pd.cut(data['renda'], bins=faixas, labels=faixa_labels, right=False)

# Contando o n√∫mero de pessoas em cada faixa
contagem_faixas = data['faixa_renda'].value_counts().sort_index()

# Calculando a densidade de probabilidade
total_pessoas = len(data)
densidade_probabilidade = contagem_faixas / total_pessoas

# Exibindo resultados
print("N√∫mero de pessoas em cada faixa de renda:")
print(contagem_faixas)
print("\nDensidade de probabilidade em cada faixa de renda:")
print(densidade_probabilidade)

# 5. Calcule a m√©dia e a vari√¢ncia da renda da amostra. Depois fa√ßa a distribui√ß√£o normal, inclua o gr√°fico.

# Calculando a m√©dia e a vari√¢ncia da renda
media_renda = data['renda'].mean()
variancia_renda = data['renda'].var()

print(f'M√©dia da renda: {media_renda:.2f}')
print(f'Vari√¢ncia da renda: {variancia_renda:.2f}')

# Plotando a distribui√ß√£o normal
# Definindo os par√¢metros da distribui√ß√£o normal
mu = media_renda
sigma = np.sqrt(variancia_renda)

# Gerando valores para a distribui√ß√£o normal
x = np.linspace(data['renda'].min(), data['renda'].max(), 100)
y = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)

# Criando o gr√°fico
plt.figure(figsize=(8, 5))
sns.histplot(data['renda'], kde=True, stat='density', color='pink', label='Distribui√ß√£o Observada')
plt.plot(x, y, color='purple', label='Distribui√ß√£o Normal Ajustada')
plt.title('Distribui√ß√£o Normal da Renda')
plt.xlabel('Renda')
plt.ylabel('Densidade')
plt.legend()
plt.show()



# 6. Primeiro considere a probabilidade encontrada no nosso conjunto de pessoas com escolaridade de p√≥s-gradua√ß√£o.
# Considerando a amostra de popula√ß√£o brasileira com 1 milh√£o de habitantes, qual a probabilidade de encontrarmos 243 mil pessoas com p√≥s-gradua√ß√£o?

from scipy.stats import binom


# Calculando a probabilidade de ter p√≥s-gradua√ß√£o
total_pessoas = len(data)
pos_count = (data['escolaridade'] == 'P√≥s-gradua√ß√£o').sum()
probabilidade_pos = pos_count / total_pessoas

print(f'Probabilidade de uma pessoa ter escolaridade P√≥s-gradua√ß√£o: {probabilidade_pos:.4f}')

# Par√¢metros da distribui√ß√£o binomial
n = 1_000_000  # Tamanho da amostra
k = 243_000    # N√∫mero de pessoas com p√≥s-gradua√ß√£o

# Calculando a probabilidade usando a distribui√ß√£o binomial
probabilidade = binom.pmf(k, n, probabilidade_pos)

print(f'Probabilidade de encontrar 243 mil pessoas com p√≥s-gradua√ß√£o em uma amostra de 1 milh√£o: {probabilidade:.10f}')

# 7. Somando as densidades n√≥s temos a fun√ß√£o dedensidadeacumulada. Considerando a coluna ‚ÄòEscolaridade‚Äô fa√ßa a fun√ß√£o de
#  densidade acumulada discreta para cada n√≠vel de escolaridade.

# Calculando a contagem para cada n√≠vel de escolaridade
contagem = data['escolaridade'].value_counts().sort_index()

# Calculando a densidade para cada n√≠vel de escolaridade
densidade = contagem / len(data)

# Calculando a densidade acumulada
densidade_acumulada = densidade.sort_index().cumsum()

# Exibindo a fun√ß√£o de densidade acumulada
print("Fun√ß√£o de Densidade Acumulada Discreta por N√≠vel de Escolaridade:")
print(densidade_acumulada)

# 8. Qual a margem de erro amostral da propor√ß√£o populacional considerando a propor√ß√£o de pessoas com n√≠vel de ingl√™s intermedi√°rio?


# Calculando a propor√ß√£o de pessoas com n√≠vel de ingl√™s intermedi√°rio
total_pessoas = len(data)
intermediario_count = (data['n√≠vel de profici√™ncia em ingl√™s'] == 'Intermedi√°rio').sum()
proporcao_intermediario = intermediario_count / total_pessoas

# Calculando a margem de erro
Z = 1.96  # Valor cr√≠tico para um intervalo de confian√ßa de 95%
n = total_pessoas  # Tamanho da amostra

margem_erro = Z * np.sqrt((proporcao_intermediario * (1 - proporcao_intermediario)) / n)

print(f'Propor√ß√£o de pessoas com n√≠vel de ingl√™s intermedi√°rio: {proporcao_intermediario:.4f}')
print(f'Margem de erro amostral: {margem_erro:.4f}')


#Precisei da ajuda do GPT :
# O valor  ùëç= 1,96 pois √© utilizado para calcular a margem de erro com base em um intervalo de confian√ßa de 95%.
# Esse valor vem da distribui√ß√£o normal padr√£o e representa a quantidade de desvios padr√£o (œÉ) que cobrem 95% da distribui√ß√£o. Aqui est√° um pouco mais de detalhes sobre isso:

# 9. Calcula a renda da popula√ß√£o. Qual a probabilidade de encontrar 60 pessoas com uma renda mil reais superior √† m√©dia?

# Calculando a renda m√©dia
media_renda = data['renda'].mean()

# Determinando a propor√ß√£o de pessoas com renda superior √† m√©dia
total_pessoas = len(data)
renda_superior_media_count = (data['renda'] > media_renda).sum()
proporcao_renda_superior = renda_superior_media_count / total_pessoas

print(f'Renda m√©dia: {media_renda:.2f}')
print(f'Propor√ß√£o de pessoas com renda superior √† m√©dia: {proporcao_renda_superior:.4f}')

# Par√¢metros da distribui√ß√£o binomial
n = total_pessoas  # Tamanho da amostra
k = 60  # N√∫mero de pessoas com renda superior √† m√©dia

# Calculando a probabilidade usando a distribui√ß√£o binomial
probabilidade = binom.pmf(k, n, proporcao_renda_superior)

print(f'Probabilidade de encontrar 60 pessoas com renda superior √† m√©dia: {probabilidade:.10f}')

# 10. Qual a probabilidade de escolhermos algu√©m do Sudeste que seja homem, com ensino fundamental e comrendamaior que2mil reais por m√™s?

# Filtrando a amostra de interesse
amostra_interesse = data[
    (data['estado'] == 'SE') &
    (data['sexo'] == 'M') &
    (data['escolaridade'] == 'Fundamental') &
    (data['renda'] > 2000)
]

# Calculando a propor√ß√£o dessa amostra no total
total_pessoas = len(data)
total_interesse = len(amostra_interesse)

probabilidade = total_interesse / total_pessoas

print(f'N√∫mero de pessoas do Sudeste, homens, com ensino fundamental e renda maior que 2 mil reais: {total_interesse}')
print(f'Probabilidade de escolher algu√©m com essas caracter√≠sticas: {probabilidade:.4f}')